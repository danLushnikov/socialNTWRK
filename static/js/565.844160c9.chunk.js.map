{"version":3,"file":"static/js/565.844160c9.chunk.js","mappings":"6MACA,G,QAA2B,4BAA3B,EAAgE,0BAAhE,EAAmG,yBAAnG,EAAqI,yBAArI,EAA4K,8BAA5K,EAAoN,0BAApN,EAA2P,6BAA3P,EAA6S,qC,mBCmB7S,EAX+B,SAACA,GAE/B,OACCC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAASC,UACxBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAI,aAAeN,EAAMO,GACjCL,UAAW,SAAAM,GAAO,OAAIA,EAAQC,SAAWN,OAAWO,CAAS,EAACN,SAAEJ,EAAMW,QAI1E,ECRA,EAJgC,SAACX,GAC7B,OAASC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEJ,EAAMY,SAC/C,E,UCKaC,EAAyC,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAExDC,GAAmCC,EAAAA,EAAAA,MAA3BC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAElB,OACCC,EAAAA,EAAAA,MAAA,QAAML,SAAUI,EAAaJ,GAAWb,UAAWC,EAAaC,SAAA,EAC/DH,EAAAA,EAAAA,KAAA,OAAAG,UACCH,EAAAA,EAAAA,KAAA,SAAAoB,EAAAA,EAAAA,GAAA,CACAnB,UAAWC,EACXmB,KAAK,YACDJ,EAAS,cAAe,CAAC,QAc9BjB,EAAAA,EAAAA,KAAA,SAAOqB,KAAK,aAGf,ECGA,EAvBgB,SAACtB,GAChB,IAAIuB,EAAiBvB,EAAMwB,WAAWC,KAAI,SAAAC,GAAC,OAC1CzB,EAAAA,EAAAA,KAAC0B,EAAM,CAAYhB,KAAMe,EAAEf,KAAMJ,GAAImB,EAAEnB,IAA1BmB,EAAEnB,GAA8B,IAE1CqB,EAAkB5B,EAAM6B,YAAYJ,KAAI,SAAAK,GAAC,OAC5C7B,EAAAA,EAAAA,KAAC8B,EAAO,CAAYnB,QAASkB,EAAElB,SAAjBkB,EAAEvB,GAA0B,IAU3C,OACCa,EAAAA,EAAAA,MAAA,OAAKlB,UAAWC,EAAWC,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEmB,KAC5BtB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,SAAEwB,KAChC3B,EAAAA,EAAAA,KAACY,EAAqB,CAACE,SAR0B,SAAAiB,GAClDhC,EAAMiC,WAAWD,EAAKE,YACvB,MASD,EC3BA,GAAeC,EAAAA,EAAAA,KACdC,EAAAA,EAAAA,KARqB,SAACC,GACtB,MAAO,CACNb,WAAYa,EAAMC,aAAad,WAC/BK,YAAaQ,EAAMC,aAAaT,YAChCK,YAAaG,EAAMC,aAAaJ,YAElC,IAEwBb,EAAAA,EAAAA,GAAA,GAAOkB,EAAAA,IAC9BC,EAAAA,EAFD,CAGEC,E,mGCbEC,EAA6B,SAACL,GAAkB,MAAM,CACtDM,OAAQN,EAAMO,KAAKD,OACtB,EAgBD,IAbA,SAAyDE,GASxD,OAAOT,EAAAA,EAAAA,IACNM,EADMN,EAR4C,SAAApC,GAClD,IAAM2C,EAAyB3C,EAAzB2C,OAAWG,GAASC,EAAAA,EAAAA,GAAK/C,EAAKgD,GACpC,OAAQL,GAGP1C,EAAAA,EAAAA,KAAC4C,GAAgBxB,EAAAA,EAAAA,GAAA,GAAKyB,KAFtB7C,EAAAA,EAAAA,KAACgD,EAAAA,GAAQ,CAAC3C,GAAI,UAIhB,GAID,C","sources":["webpack://my-ts-app/./src/components/Messages/Messages.module.css?8e7e","components/Messages/Dialog/Dialog.tsx","components/Messages/Message/Message.tsx","components/Messages/MessagesReduxForm copy.tsx","components/Messages/Messages.tsx","components/Messages/Messages-container.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__4INsj\",\"dialogs\":\"Messages_dialogs__bb2Tn\",\"dialog\":\"Messages_dialog__wXj5t\",\"active\":\"Messages_active__SXGlS\",\"messageItem\":\"Messages_messageItem__O-5WV\",\"message\":\"Messages_message__uhBQz\",\"addMessage\":\"Messages_addMessage__ts9Et\",\"addMessageTextArea\":\"Messages_addMessageTextArea__UJJa+\"};","import React from 'react';\r\nimport s from \"../Messages.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n\tid: number\r\n\tname:string\r\n}\r\n\r\nconst Dialog:React.FC<Props> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={s.dialog}>\r\n\t\t\t<NavLink to={'/messages/' + props.id}\r\n\t\t\t\tclassName={navData => navData.isActive ? s.active : undefined}>{props.name}\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from \"../Messages.module.css\";\r\n\r\ntype Props = {\r\n    message:string\r\n}\r\nconst Message:React.FC<Props> = (props) => {\r\n    return   <div className={s.message}>{props.message}</div>\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Messages.module.css';\r\nimport {SubmitHandler, useForm } from 'react-hook-form'\r\n\r\ntype Props = {\r\n\tonSubmit: SubmitHandler<IMessageFormInput>\r\n}\r\n\r\nexport type IMessageFormInput = {\r\n\tmessageText: string\r\n}\r\n\r\n\r\nexport const MessagesFormHookReact: React.FC<Props> = ({ onSubmit }) => {\r\n\t\r\n\tconst { register, handleSubmit } = useForm<IMessageFormInput>()\r\n\t\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)} className={s.addMessage}>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\tclassName={s.addMessageTextArea}\r\n\t\t\t\ttype='textarea'\r\n\t\t\t\t{...register('messageText', {})}\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t{/* <div>\r\n\t\t\t\t<Field\r\n\t\t\t\t\ttypeField={'textarea'}\r\n\t\t\t\t\tplaceholder={'ENTER Message'}\r\n\t\t\t\t\tname={'messageText'}\r\n\t\t\t\t\tcomponent={FormControl}\r\n\t\t\t\t\tvalidate={[required, maxLength50]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<button>add message</button> */}\r\n\t\t\t<input type='submit' />\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\n","import React, { FC } from 'react';\r\nimport s from './Messages.module.css'\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport { MessagesReduxForm } from './MessagesReduxForm';\r\nimport { DialogDataType, MessageDataType } from '../../types/commonTypes';\r\nimport { IMessageFormInput, MessagesFormHookReact } from './MessagesReduxForm copy'\r\nimport { SubmitHandler } from 'react-hook-form'\r\n\r\n\r\n\r\ntype Props = {\r\n\tdialogData: Array<DialogDataType>\r\n\tmessageData: Array<MessageDataType>\r\n\taddMessage: (messageText: string) => void\r\n}\r\n// export type MessageFormValuesType = {\r\n// \tmessageText:string\r\n// }\r\n\r\nconst Messages= (props:Props) => {\r\n\tlet dialogElements = props.dialogData.map(d => (\r\n\t\t<Dialog key={d.id} name={d.name} id={d.id} />\r\n\t))\r\n\tlet messageElements = props.messageData.map(m => (\r\n\t\t<Message key={m.id} message={m.message} />\r\n\t))\r\n\r\n\t// let addMessage = (values: MessageFormValuesType) => {\r\n\t// \tprops.addMessage(values.messageText)\r\n\t// }\r\n\tconst onSubmit: SubmitHandler<IMessageFormInput> = data => {\r\n\t\tprops.addMessage(data.messageText)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.messages}>\r\n\t\t\t<nav className={s.dialogs}>{dialogElements}</nav>\r\n\t\t\t<div className={s.messageItem}>{messageElements}</div>\r\n\t\t\t<MessagesFormHookReact onSubmit={onSubmit} />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Messages;","import { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport { actions } from '../../redux/messagesReducer'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport Messages from './Messages'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\treturn {\r\n\t\tdialogData: state.messagesPage.dialogData,\r\n\t\tmessageData: state.messagesPage.messageData,\r\n\t\tmessageText: state.messagesPage.messageText,\r\n\t}\r\n}\r\nexport default compose(\r\n\tconnect(mapStateToProps, { ...actions }),\r\n\twithAuthRedirect\r\n)(Messages) as React.ComponentType\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Messages)\r\n// export default connect(mapStateToProps, {addMessage, updateMessageText})(AuthRedirectComponent)\r\n","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from '../redux/reduxStore'\r\n\r\nlet mapStateToPropsForNavigate = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\ntype MapStateProps = ReturnType<typeof mapStateToPropsForNavigate>\r\n\r\nfunction withAuthRedirect<WCProps extends MapStateProps>(WrappedComponent: React.ComponentType<WCProps>) {\r\n\tconst redirectComponent: React.FC<MapStateProps> = props => {\r\n\t\tlet { isAuth, ...restProps } = props\r\n\t\treturn !isAuth ? (\r\n\t\t\t<Navigate to={'/login'} />\r\n\t\t) : (\r\n\t\t\t<WrappedComponent {...restProps as WCProps} />\r\n\t\t)\r\n\t}\r\n\treturn connect<MapStateProps,{}, WCProps, AppStateType>(\r\n\t\tmapStateToPropsForNavigate\r\n\t)(redirectComponent)\r\n}\r\nexport default withAuthRedirect;\r\n"],"names":["props","_jsx","className","s","children","NavLink","to","id","navData","isActive","undefined","name","message","MessagesFormHookReact","_ref","onSubmit","_useForm","useForm","register","handleSubmit","_jsxs","_objectSpread","type","dialogElements","dialogData","map","d","Dialog","messageElements","messageData","m","Message","data","addMessage","messageText","compose","connect","state","messagesPage","actions","withAuthRedirect","Messages","mapStateToPropsForNavigate","isAuth","auth","WrappedComponent","restProps","_objectWithoutProperties","_excluded","Navigate"],"sourceRoot":""}