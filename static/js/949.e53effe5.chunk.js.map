{"version":3,"file":"static/js/949.e53effe5.chunk.js","mappings":"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","sources":["utils/validators/validator.ts","webpack://my-ts-app/./src/components/Profile/Profile.module.css?b512","webpack://my-ts-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/Profile/ProfileInfo/ProfileDescription/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","components/Profile/ProfileInfo/ProfileDescription/ProfileDescriptionForm copy.tsx","components/Profile/ProfileInfo/ProfileMainPicture/ProfileMainPicture.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/CreatePost/CreatePost.module.css","webpack://my-ts-app/./src/components/Profile/CreatePost/Post/Post.module.css?a33f","components/Profile/CreatePost/Post/Post.tsx","webpack://my-ts-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","components/Profile/CreatePost/CreatePostForm.tsx","components/Profile/CreatePost/CreatePost.tsx","components/Profile/Profile.tsx","components/Profile/Profile-container.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = value => {\r\n    return value\r\n        ? undefined\r\n        : 'Field is required, bitch!'\r\n}\r\nexport const maxLengthCreator =\r\n\t(maxLength: number): FieldValidatorType =>\r\n\t(value) => {\r\n\t\treturn value && value.length < maxLength\r\n\t\t\t? undefined\r\n\t\t\t: `Max length is ${maxLength} symblols, bitch!`\r\n\t}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__zs+a8\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__+z036\",\"mainPicture\":\"ProfileInfo_mainPicture__1CySs\",\"mainInfo\":\"ProfileInfo_mainInfo__s2MCe\",\"profileImageContainer\":\"ProfileInfo_profileImageContainer__sGA5j\",\"profileImage\":\"ProfileInfo_profileImage__shbrd\",\"profileDescription\":\"ProfileInfo_profileDescription__V6DqX\",\"fullName\":\"ProfileInfo_fullName__hBre9\",\"aboutMe\":\"ProfileInfo_aboutMe__FEfZS\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__pISbB\",\"lookingForAJobDescription\":\"ProfileInfo_lookingForAJobDescription__BX33Q\",\"contacts\":\"ProfileInfo_contacts__geA-l\",\"contact\":\"ProfileInfo_contact__PbXsP\",\"editBtnContainer\":\"ProfileInfo_editBtnContainer__zKx7y\",\"saveBtnContainer\":\"ProfileInfo_saveBtnContainer__bZW3V\",\"formError\":\"ProfileInfo_formError__MT+Mp\"};","import React, { ChangeEvent } from 'react';\r\nimport s from './../ProfileInfo.module.css'\r\nimport userPhoto from '../../../../assets/images/logoUser.png'\r\nimport { ProfileType } from '../../../../types/commonTypes'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tisOwner: boolean\r\n\tsavePhoto:(file:File)=>void\r\n}\r\n\r\nconst ProfileAvatar: React.FC<Props> = ({ profile, isOwner, savePhoto }) => {\r\n\tconst onChangeMyAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\te.target.files?.length && savePhoto(e.target.files[0])\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.profileImageContainer}>\r\n\t\t\t<img\r\n\t\t\t\tclassName={s.profileImage}\r\n\t\t\t\tsrc={profile.photos.large ? profile.photos.large : userPhoto}\r\n\t\t\t/>\r\n\t\t\t{isOwner && <input type='file' onChange={onChangeMyAvatar} />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileAvatar;","import React from 'react'\r\nimport s from '../../ProfileInfo.module.css'\r\ntype Props = {\r\n\ttitle: string\r\n\tvalue:string\r\n}\r\nconst Contact: React.FC<Props> = ({ title, value }) => {\r\n\treturn (\r\n\t\t<div className={s.contact}>\r\n\t\t\t{title}: {value ? value : '--'}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport { ContactsType, ProfileType } from '../../../../types/commonTypes'\r\nimport s from '../ProfileInfo.module.css'\r\nimport Contact from './Contact/Contact'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tgoToEditMode:()=>void\r\n}\r\n\r\nconst ProfileDescription:React.FC<Props> = ({ profile, goToEditMode }) => {\r\n\treturn (\r\n\t\t<div className={s.profileDescription}>\r\n\t\t\t<div className={s.fullName}>\r\n\t\t\t\t{profile.fullName.replace(\r\n\t\t\t\t\tprofile.fullName[0],\r\n\t\t\t\t\tprofile.fullName[0].toUpperCase()\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.lookingForAJob}>\r\n\t\t\t\tLooking for a job:{' '}\r\n\t\t\t\t{profile.lookingForAJob ? 'Я ищу job' : 'Я  не ищу job'}\r\n\t\t\t</div>\r\n\t\t\t<div >\r\n\t\t\t\tAbout Me:{' '}\r\n\t\t\t\t{profile.aboutMe}\r\n\t\t\t</div>\r\n\t\t\t{profile.lookingForAJob && (\r\n\t\t\t\t<div className={s.lookingForAJobDescription}>\r\n\t\t\t\t\tMy professional skills: {profile.lookingForAJobDescription}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\tContacts:\r\n\t\t\t\t{Object.keys(profile.contacts).map(key => {\r\n\t\t\t\t\tlet currentValue = profile.contacts[key as keyof ContactsType]\r\n\t\t\t\t\treturn <Contact key={key} title={key} value={currentValue} />\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.editBtnContainer}>\r\n\t\t\t\t<button onClick={goToEditMode}>Edit</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileDescription","import React from 'react'\r\nimport { SubmitHandler,useForm } from 'react-hook-form'\r\nimport { ProfileType } from '../../../../types/commonTypes'\r\nimport s from '../ProfileInfo.module.css'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tonSubmit: SubmitHandler<ProfileType>\r\n}\r\n//todo:rewrite to formik, useForm not working \r\nexport const ProfileDescriptionFormHooksReact: React.FC<Props> = ({\r\n\tprofile,\r\n\tonSubmit,\r\n}) => {\r\n\tconst { register, handleSubmit } = useForm<ProfileType>()\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder={'Inter your name'}\r\n\t\t\t\t\t{...register('fullName', { required: false, maxLength: 50 })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Are you looking for a job?</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype={'checkbox'}\r\n\t\t\t\t\tplaceholder={'Are you looking for a job?'}\r\n\t\t\t\t\t{...register('lookingForAJob', { required: false })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\tplaceholder={'Your professional skills'}\r\n\t\t\t\t\t{...register('lookingForAJobDescription')}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\tplaceholder={'Your aboutMe aboutMe'}\r\n\t\t\t\t\t{...register('aboutMe', { required: false })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\tContacts:\r\n\t\t\t\t{profile &&\r\n\t\t\t\t\tObject.keys(profile.contacts).map(key => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className={s.contact} key={key}>\r\n\t\t\t\t\t\t\t\t{key}:{' '}\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t{...register(`contacts.${key}` as any, {\r\n\t\t\t\t\t\t\t\t\t\trequired: false,\r\n\t\t\t\t\t\t\t\t\t\tmaxLength: 50,\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<input type='submit' />\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport s from '../ProfileInfo.module.css'\r\n\r\nconst ProfileMainPicture = () => {\r\n\treturn (\r\n\t\t<div className={s.mainPicture}>\r\n\t\t\t<img src='https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg' />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default ProfileMainPicture","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype Props = {\r\n\tstatus: string\r\n\tupdateStatus:(status:string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<Props> = props => {\r\n\tlet [editMode, setEditMode] = useState(false)\r\n\tlet [status, setStatus] = useState(props.status)\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status)\r\n\t}, [props.status])\r\n\r\n\tconst toggleEditMode = () => {\r\n\t\tsetEditMode(!editMode)\r\n\t\tprops.updateStatus(status)\r\n\t}\r\n\tconst onUpdateStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.currentTarget) {\r\n\t\t\t\r\n\t\t\tsetStatus(e.currentTarget.value)\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!editMode ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{'Status: '}\r\n\t\t\t\t\t<span onDoubleClick={toggleEditMode}>\r\n\t\t\t\t\t\t{status ? status : 'Insert your status here'}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={onUpdateStatus}\r\n\t\t\t\t\t\tautoFocus={true}\r\n\t\t\t\t\t\tonBlur={toggleEditMode}\r\n\t\t\t\t\t\tvalue={status}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import { useState } from 'react'\r\nimport { SubmitHandler } from 'react-hook-form'\r\nimport { ContactsType, ProfileType } from '../../../types/commonTypes'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileAvatar from './ProfileAvatar/ProfileAvatar'\r\nimport ProfileDescription from './ProfileDescription/ProfileDescription'\r\nimport { ProfileDescriptionFormHooksReact } from './ProfileDescription/ProfileDescriptionForm copy'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileMainPicture from './ProfileMainPicture/ProfileMainPicture'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType|null\r\n\tstatus: string\r\n\tisOwner: boolean\r\n\tsavePhoto: (file: File) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo: React.FC<Props> = props => {\r\n\t\r\n\tconst [editMode, setEditMode] = useState(false)\r\n\t\r\n\tif (!props.profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\r\n\r\n\t// todo: remove 'then' \r\n\tconst onSubmit: SubmitHandler<ProfileType> = profileData => {\r\n\t\tprops.saveProfile(profileData).then(() => {\r\n\t\t\tsetEditMode(false)\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.profileInfo}>\r\n\t\t\t<ProfileMainPicture />\r\n\t\t\t<div className={s.mainInfo}>\r\n\t\t\t\t<ProfileAvatar\r\n\t\t\t\t\tsavePhoto={props.savePhoto}\r\n\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\tisOwner={props.isOwner}\r\n\t\t\t\t/>\r\n\t\t\t\t{editMode ? (\r\n\t\t\t\t\t<ProfileDescriptionFormHooksReact\r\n\t\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<ProfileDescription\r\n\t\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\t\tgoToEditMode={() => {\r\n\t\t\t\t\t\t\tsetEditMode(true)\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<ProfileStatusWithHooks\r\n\t\t\t\tstatus={props.status}\r\n\t\t\t\tupdateStatus={props.updateStatus}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"createPost\":\"CreatePost_createPost__nDcYP\",\"postTitle\":\"CreatePost_postTitle__iq65a\",\"postButtonContainer\":\"CreatePost_postButtonContainer__kbMhg\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__bLSGt\",\"likes\":\"Post_likes__Vwb7K\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype Props = {\r\n\tid: number\r\n\tmessage: string\r\n\tlikesCount: number\r\n}\r\n\r\nconst Post:React.FC<Props> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.post}>\r\n\t\t\t<div>\r\n\t\t\t\t<div>post: {props.id} MESSAGE: {props.message}</div>\r\n\t\t\t\t<div className={s.likes}>Likes: {props.likesCount}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__W8Zv8\",\"error\":\"FormControls_error__xG5cu\",\"formSummaryError\":\"FormControls_formSummaryError__mksJt\",\"loginForm\":\"FormControls_loginForm__IN-0v\",\"rememberMe\":\"FormControls_rememberMe__UftWm\"};","import React from \"react\";\r\nimport { WrappedFieldInputProps, WrappedFieldMetaProps } from 'redux-form'\r\nimport s from './FormControls.module.css'\r\n\r\ntype Props = {\r\n\tinput: WrappedFieldInputProps\r\n\tmeta: WrappedFieldMetaProps\r\n\ttypeField: string\r\n}\r\n\r\nexport const FormControl:React.FC<Props> = ({ input, meta, ...props }) => {\r\n\tconst hasError = meta.touched && meta.error;\r\n\treturn <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n\t\t<div>\r\n\t\t\t{props.typeField === \"textarea\" && <textarea {...input} {...props} />}\r\n\t\t\t{props.typeField === \"input\" && <input {...input} {...props} />}\r\n\t\t</div>\r\n\t\t{hasError && <span>{meta.error}</span>}\r\n\t</div>\r\n}\r\n\r\n// export const Textarea = ({input,meta,...props}) => {\r\n\r\n//     const hasError = meta.touched && meta.error;\r\n\r\n//     return <div className={s.formControl + \" \" + (hasError ? s.error :\"\")}>\r\n//       <div>\r\n//           <textarea {...input} {...props}/>\r\n//       </div>\r\n//            { hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n// }\r\n\r\n// export const Input = ({input,meta,...props}) => {\r\n\r\n//     const hasError = meta.touched && meta.error;\r\n\r\n//     return <div className={s.formControl + \" \" + (hasError ? s.error :\"\")}>\r\n//         <div>\r\n//             <input {...input} {...props}/>\r\n//         </div>\r\n//         { hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n// }","import { maxLengthCreator, required } from \"../../../utils/validators/validator\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { FormControl } from \"../../common/FormControls/FormControls\";\r\nimport s from './CreatePost.module.css'\r\nimport React from \"react\";\r\n\r\n\r\n\r\nexport type PostFormValuesType = {\r\n\tpostText:string\r\n}\r\n\r\nconst maxlength20 = maxLengthCreator(20)\r\nconst CreatePostForm: React.FC<\r\n\tInjectedFormProps<PostFormValuesType>\r\n> = props => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<Field\r\n\t\t\t\t\ttypeField={'textarea'}\r\n\t\t\t\t\tplaceholder={'Enter post here! plz'}\r\n\t\t\t\t\tname={'postText'}\r\n\t\t\t\t\tcomponent={FormControl}\r\n\t\t\t\t\tvalidate={[required, maxlength20]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.postButtonContainer}>\r\n\t\t\t\t<button>Add Post</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\nexport const CreatePostReduxForm = reduxForm<PostFormValuesType>({\r\n\tform: 'addPost',\r\n})(CreatePostForm)","import React from 'react';\r\nimport s from './CreatePost.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {CreatePostReduxForm, PostFormValuesType} from \"./CreatePostForm\";\r\nimport { PostDataType } from '../../../types/commonTypes'\r\n\r\ntype Props = {\r\n    postData: Array<PostDataType>\r\n    addPost:(postText:string)=>void\r\n}\r\n\r\nconst CreatePost: React.FC<Props> = props => {\r\n\tlet postElements = props.postData\r\n\t\t.map(p => {\r\n\t\t\treturn (\r\n\t\t\t\t<Post\r\n\t\t\t\t\tkey={p.id}\r\n\t\t\t\t\tid={p.id}\r\n\t\t\t\t\tmessage={p.message}\r\n\t\t\t\t\tlikesCount={p.likesCount}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t\t.reverse()\r\n\tlet addPost = (values: PostFormValuesType) => {\r\n\t\tprops.addPost(values.postText)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.createPost}>\r\n\t\t\t<h3 className={s.postTitle}>Напиши пост!</h3>\r\n\t\t\t<CreatePostReduxForm onSubmit={addPost} />\r\n\t\t\t{postElements}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CreatePost;","import { FC } from 'react'\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport CreatePost from \"./CreatePost/CreatePost\";\r\nimport { PostDataType, ProfileType } from '../../types/commonTypes';\r\n\r\n\r\ntype Props = {\r\n\tisOwner: boolean\r\n\tprofile: ProfileType|null\r\n\tstatus: string\r\n\tpostData: Array<PostDataType>\r\n\taddPost: (postText: string) => void\r\n\tsavePhoto: (file: any) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst Profile:FC<Props> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.profile}>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tsavePhoto={props.savePhoto}\r\n\t\t\t\tisOwner={props.isOwner}\r\n\t\t\t\tprofile={props.profile}\r\n\t\t\t\tstatus={props.status}\r\n\t\t\t\tupdateStatus={props.updateStatus}\r\n\t\t\t\tsaveProfile={props.saveProfile}\r\n\t\t\t/>\r\n\t\t\t<CreatePost\r\n\t\t\t\tpostData={props.postData}\r\n\t\t\t\taddPost={props.addPost} />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Profile;","import React from 'react'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { Location, NavigateFunction, useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport {\r\n\tactions,\r\n\tgetProfileStatus,\r\n\tgetUserProfile,\r\n\tsavePhoto,\r\n\tsaveProfile,\r\n\tupdateProfileStatus,\r\n} from '../../redux/profileReducer'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport { PostDataType, ProfileType } from '../../types/commonTypes'\r\nimport Profile from './Profile'\r\n\r\ntype MapStateProps =\r\n\t{\r\n\tpostData: Array<PostDataType>\r\n\tpostText: string\r\n\tprofile: ProfileType\r\n\tstatus: string\r\n\tauthorizedUserId: number\r\n}\r\ntype MapDispatchProps = {\r\n\taddPost: (postText: string) => void\r\n\tgetUserProfile: (userId: number) => void\r\n\tgetProfileStatus: (userId: number) => void\r\n\tupdateProfileStatus: (status: string) => void\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\ntype MyOwnProps = {\r\n\trouter: {\r\n\t\tnavigate: NavigateFunction\r\n\t\tparams: { userId: string }\r\n\t}\r\n}\r\ntype PropsType = MapStateProps & MapDispatchProps & MyOwnProps\r\n\r\nconst ProfilePage = () => {\r\n\tconst postData = useSelector((state: AppStateType) => state.profilePage.postData)\r\n\tconst profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\tconst status = useSelector((state: AppStateType) => state.profilePage.status)\r\n\tconst authorizedUserId = useSelector((state: AppStateType) => state.auth.id)\r\n\r\n\treturn (\r\n\t\t<Profile\r\n\t\t\tprofile={profile}\r\n\t\t\tpostData={postData}\r\n\t\t\tstatus={status}\r\n\t\t\tisOwner={false}\r\n\t\t\taddPost={function (postText: string): void {\r\n\t\t\t\tthrow new Error('Function not implemented.')\r\n\t\t\t}}\r\n\t\t\tsavePhoto={function (file: any): void {\r\n\t\t\t\tthrow new Error('Function not implemented.')\r\n\t\t\t}}\r\n\t\t\tupdateStatus={function (status: string): void {\r\n\t\t\t\tthrow new Error('Function not implemented.')\r\n\t\t\t}}\r\n\t\t\tsaveProfile={function (profile: ProfileType): Promise<void> {\r\n\t\t\t\tthrow new Error('Function not implemented.')\r\n\t\t\t} }\t\t\t// isOwner={!this.props.router.params.userId}\r\n\t\t\t// savePhoto={this.props.savePhoto}\r\n\t\t\t// addPost={this.props.addPost}\r\n\t\t\t// updateStatus={this.props.updateProfileStatus}\r\n\t\t\t// saveProfile={this.props.saveProfile}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\t\r\n\tprofileRefresh() {\r\n\t\tlet userId = +this.props.router.params.userId\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId\r\n\t\t\tif (!userId) {this.props.router.navigate('/login')}\r\n\t\t}\r\n\t\tthis.props.getUserProfile(userId)\r\n\t\tthis.props.getProfileStatus(userId)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.profileRefresh()\r\n\t}\r\n\tcomponentDidUpdate(prevProps: PropsType) {\r\n\t\tif (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n\t\t\tthis.profileRefresh()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile\r\n\t\t\tpostData={this.props.postData}\r\n\t\t\tisOwner={!this.props.router.params.userId}\r\n\t\t\tprofile={this.props.profile}\r\n\t\t\tstatus={this.props.status}\r\n\t\t\tsavePhoto={this.props.savePhoto}\r\n\t\t\taddPost={this.props.addPost}\r\n\t\t\t\tupdateStatus={this.props.updateProfileStatus}\r\n\t\t\t\tsaveProfile={this.props.saveProfile}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n\tpostData: state.profilePage.postData,\r\n\tpostText: state.profilePage.postText,\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tauthorizedUserId: state.auth.id,\r\n})\r\nfunction withRouter(Component: React.ComponentType) {\r\n\tfunction ComponentWithRouterProp(\tprops:any\t) {\r\n\t\tlet navigate = useNavigate()\r\n\t\tlet params = useParams()\r\n\t\treturn <Component {...props} router={{ navigate, params }} />\r\n\t}\r\n\treturn ComponentWithRouterProp\r\n}\r\nexport default compose(\r\n\tconnect(mapStateToProps, {\r\n\t\taddPost:actions.addPost,\r\n\t\tgetUserProfile,\r\n\t\tgetProfileStatus,\r\n\t\tupdateProfileStatus,\r\n\t\tsavePhoto,\r\n\t\tsaveProfile,\r\n\t}),\r\n\twithRouter,\r\n\twithAuthRedirect\r\n)(ProfileContainer) as React.ComponentType\r\n","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from '../redux/reduxStore'\r\n\r\nlet mapStateToPropsForNavigate = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\ntype MapStateProps = ReturnType<typeof mapStateToPropsForNavigate>\r\n\r\nfunction withAuthRedirect<WCProps extends MapStateProps>(WrappedComponent: React.ComponentType<WCProps>) {\r\n\tconst redirectComponent: React.FC<MapStateProps> = props => {\r\n\t\tlet { isAuth, ...restProps } = props\r\n\t\treturn !isAuth ? (\r\n\t\t\t<Navigate to={'/login'} />\r\n\t\t) : (\r\n\t\t\t<WrappedComponent {...restProps as WCProps} />\r\n\t\t)\r\n\t}\r\n\treturn connect<MapStateProps,{}, WCProps, AppStateType>(\r\n\t\tmapStateToPropsForNavigate\r\n\t)(redirectComponent)\r\n}\r\nexport default withAuthRedirect;\r\n"],"names":["maxLength","_ref","profile","isOwner","savePhoto","_jsxs","className","s","children","_jsx","src","photos","large","userPhoto","type","onChange","e","_e$target$files","target","files","length","title","value","goToEditMode","fullName","replace","toUpperCase","lookingForAJob","aboutMe","lookingForAJobDescription","Object","keys","contacts","map","key","currentValue","Contact","onClick","ProfileDescriptionFormHooksReact","onSubmit","_useForm","useForm","register","handleSubmit","_objectSpread","placeholder","required","concat","props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","toggleEditMode","updateStatus","currentTarget","autoFocus","onBlur","onDoubleClick","Preloader","ProfileMainPicture","ProfileAvatar","profileData","saveProfile","then","ProfileDescription","ProfileStatusWithHooks","id","message","likesCount","undefined","FormControl","input","meta","_objectWithoutProperties","_excluded","hasError","touched","error","typeField","maxlength20","CreatePostReduxForm","reduxForm","form","Field","name","component","validate","postElements","postData","p","Post","reverse","values","addPost","postText","ProfileInfo","CreatePost","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","authorizedUserId","navigate","getUserProfile","getProfileStatus","profileRefresh","prevProps","Profile","updateProfileStatus","React","compose","connect","state","profilePage","auth","actions","Component","useNavigate","useParams","withAuthRedirect","mapStateToPropsForNavigate","isAuth","WrappedComponent","restProps","Navigate","to"],"sourceRoot":""}