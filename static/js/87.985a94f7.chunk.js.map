{"version":3,"file":"static/js/87.985a94f7.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.tsx","webpack://my-ts-app/./src/components/Profile/Profile.module.css?b512","webpack://my-ts-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/Profile/ProfileInfo/ProfileDescription/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","components/Profile/ProfileInfo/ProfileDescription/ProfileDescriptionForm copy.tsx","components/Profile/ProfileInfo/ProfileMainPicture/ProfileMainPicture.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-ts-app/./src/components/Profile/CreatePost/Post/Post.module.css?a33f","components/Profile/CreatePost/Post/Post.tsx","components/Profile/CreatePost/CreatePostForm copy.tsx","components/Profile/CreatePost/CreatePost.tsx","components/Profile/Profile.tsx","components/Profile/Profile-container.tsx"],"sourcesContent":["import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from '../redux/reduxStore'\r\n\r\nlet mapStateToPropsForNavigate = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\ntype MapStateProps = ReturnType<typeof mapStateToPropsForNavigate>\r\n\r\nfunction withAuthRedirect<WCProps extends MapStateProps>(WrappedComponent: React.ComponentType<WCProps>) {\r\n\tconst redirectComponent: React.FC<MapStateProps> = props => {\r\n\t\tlet { isAuth, ...restProps } = props\r\n\t\treturn !isAuth ? (\r\n\t\t\t<Navigate to={'/login'} />\r\n\t\t) : (\r\n\t\t\t<WrappedComponent {...restProps as WCProps} />\r\n\t\t)\r\n\t}\r\n\treturn connect<MapStateProps,{}, WCProps, AppStateType>(\r\n\t\tmapStateToPropsForNavigate\r\n\t)(redirectComponent)\r\n}\r\nexport default withAuthRedirect;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__BlEvq\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__xOZzw\",\"mainPicture\":\"ProfileInfo_mainPicture__CXOCx\",\"mainInfo\":\"ProfileInfo_mainInfo__Jtu+v\",\"profileImageContainer\":\"ProfileInfo_profileImageContainer__GnQtL\",\"profileImage\":\"ProfileInfo_profileImage__PePbU\",\"profileDescription\":\"ProfileInfo_profileDescription__opt1D\",\"fullName\":\"ProfileInfo_fullName__OdVLN\",\"aboutMe\":\"ProfileInfo_aboutMe__xLsbP\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__b1xAU\",\"lookingForAJobDescription\":\"ProfileInfo_lookingForAJobDescription__ORLbj\",\"contacts\":\"ProfileInfo_contacts__3R6x7\",\"contact\":\"ProfileInfo_contact__bTwLs\",\"editBtnContainer\":\"ProfileInfo_editBtnContainer__9TRfR\",\"saveBtnContainer\":\"ProfileInfo_saveBtnContainer__NPgPP\",\"formError\":\"ProfileInfo_formError__0PWi-\"};","import React, { ChangeEvent } from 'react';\r\nimport s from './../ProfileInfo.module.css'\r\nimport userPhoto from '../../../../assets/images/logoUser.png'\r\nimport { ProfileType } from '../../../../types/commonTypes'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tisOwner: boolean\r\n\tsavePhoto:(file:File)=>void\r\n}\r\n\r\nconst ProfileAvatar: React.FC<Props> = ({ profile, isOwner, savePhoto }) => {\r\n\tconst onChangeMyAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\te.target.files?.length && savePhoto(e.target.files[0])\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.profileImageContainer}>\r\n\t\t\t<img\r\n\t\t\t\tclassName={s.profileImage}\r\n\t\t\t\tsrc={profile.photos.large ? profile.photos.large : userPhoto}\r\n\t\t\t/>\r\n\t\t\t{isOwner && <input type='file' onChange={onChangeMyAvatar} />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileAvatar;","import React from 'react'\r\nimport s from '../../ProfileInfo.module.css'\r\ntype Props = {\r\n\ttitle: string\r\n\tvalue:string\r\n}\r\nconst Contact: React.FC<Props> = ({ title, value }) => {\r\n\treturn (\r\n\t\t<div className={s.contact}>\r\n\t\t\t{title}: {value ? value : '--'}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport { ContactsType, ProfileType } from '../../../../types/commonTypes'\r\nimport s from '../ProfileInfo.module.css'\r\nimport Contact from './Contact/Contact'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tgoToEditMode:()=>void\r\n}\r\n\r\nconst ProfileDescription:React.FC<Props> = ({ profile, goToEditMode }) => {\r\n\treturn (\r\n\t\t<div className={s.profileDescription}>\r\n\t\t\t<div className={s.fullName}>\r\n\t\t\t\t{profile.fullName.replace(\r\n\t\t\t\t\tprofile.fullName[0],\r\n\t\t\t\t\tprofile.fullName[0].toUpperCase()\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.lookingForAJob}>\r\n\t\t\t\tLooking for a job:{' '}\r\n\t\t\t\t{profile.lookingForAJob ? 'Я ищу job' : 'Я  не ищу job'}\r\n\t\t\t</div>\r\n\t\t\t<div >\r\n\t\t\t\tAbout Me:{' '}\r\n\t\t\t\t{profile.aboutMe}\r\n\t\t\t</div>\r\n\t\t\t{profile.lookingForAJob && (\r\n\t\t\t\t<div className={s.lookingForAJobDescription}>\r\n\t\t\t\t\tMy professional skills: {profile.lookingForAJobDescription}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\tContacts:\r\n\t\t\t\t{Object.keys(profile.contacts).map(key => {\r\n\t\t\t\t\tlet currentValue = profile.contacts[key as keyof ContactsType]\r\n\t\t\t\t\treturn <Contact key={key} title={key} value={currentValue} />\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.editBtnContainer}>\r\n\t\t\t\t<button onClick={goToEditMode}>Edit</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileDescription","import React from 'react'\r\nimport { SubmitHandler,useForm } from 'react-hook-form'\r\nimport { ProfileType } from '../../../../types/commonTypes'\r\nimport s from '../ProfileInfo.module.css'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType\r\n\tonSubmit: SubmitHandler<ProfileType>\r\n}\r\n//todo:rewrite to formik, useForm not working \r\nexport const ProfileDescriptionFormHooksReact: React.FC<Props> = ({\r\n\tprofile,\r\n\tonSubmit,\r\n}) => {\r\n\tconst { register, handleSubmit } = useForm<ProfileType>()\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder={'Inter your name'}\r\n\t\t\t\t\t{...register('fullName', { required: false, maxLength: 50 })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Are you looking for a job?</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype={'checkbox'}\r\n\t\t\t\t\tplaceholder={'Are you looking for a job?'}\r\n\t\t\t\t\t{...register('lookingForAJob', { required: false })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\tplaceholder={'Your professional skills'}\r\n\t\t\t\t\t{...register('lookingForAJobDescription')}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\tplaceholder={'Your aboutMe aboutMe'}\r\n\t\t\t\t\t{...register('aboutMe', { required: false })}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\tContacts:\r\n\t\t\t\t{profile &&\r\n\t\t\t\t\tObject.keys(profile.contacts).map(key => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className={s.contact} key={key}>\r\n\t\t\t\t\t\t\t\t{key}:{' '}\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t{...register(`contacts.${key}` as any, {\r\n\t\t\t\t\t\t\t\t\t\trequired: false,\r\n\t\t\t\t\t\t\t\t\t\tmaxLength: 50,\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<input type='submit' />\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport s from '../ProfileInfo.module.css'\r\n\r\nconst ProfileMainPicture = () => {\r\n\treturn (\r\n\t\t<div className={s.mainPicture}>\r\n\t\t\t<img src='https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg' />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default ProfileMainPicture","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AnyAction } from 'redux'\r\nimport { updateProfileStatus } from '../../../../redux/profileReducer'\r\nimport { AppStateType } from '../../../../redux/reduxStore'\r\n\r\n// type Props = {\r\n// \tstatus: string\r\n// \tupdateStatus: (status: string) => void\r\n// }\r\n\r\nconst ProfileStatusWithHooks: React.FC = () => {\r\n\tconst currentStatus = useSelector((state: AppStateType) => state.profilePage.status)\r\n\tconst dispatch = useDispatch()\r\n\tconst onUpdateStatus = (status: string) => {\r\n\t\tdispatch(updateProfileStatus(status) as unknown as AnyAction)\r\n\t}\r\n//todo: refactoring this code\r\n\tlet [editMode, setEditMode] = useState(false)\r\n\tlet [status, setStatus] = useState(currentStatus)\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(currentStatus)\r\n\t}, [currentStatus])\r\n\r\n\tconst toggleEditMode = () => {\r\n\t\tsetEditMode(!editMode)\r\n\t\tonUpdateStatus(status)\r\n\t}\r\n\tconst onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.currentTarget) {\r\n\t\t\tsetStatus(e.currentTarget.value)\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!editMode ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{'Status: '}\r\n\t\t\t\t\t<span onDoubleClick={toggleEditMode}>\r\n\t\t\t\t\t\t{status ? status : 'Insert your status here'}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tautoFocus={true}\r\n\t\t\t\t\t\tonBlur={toggleEditMode}\r\n\t\t\t\t\t\tvalue={status}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import { useState } from 'react'\r\nimport { SubmitHandler } from 'react-hook-form'\r\nimport { ContactsType, ProfileType } from '../../../types/commonTypes'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileAvatar from './ProfileAvatar/ProfileAvatar'\r\nimport ProfileDescription from './ProfileDescription/ProfileDescription'\r\nimport { ProfileDescriptionFormHooksReact } from './ProfileDescription/ProfileDescriptionForm copy'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileMainPicture from './ProfileMainPicture/ProfileMainPicture'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\n\r\ntype Props = {\r\n\tprofile: ProfileType|null\r\n\tstatus: string\r\n\tisOwner: boolean\r\n\tsavePhoto: (file: File) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo: React.FC<Props> = props => {\r\n\t\r\n\tconst [editMode, setEditMode] = useState(false)\r\n\t\r\n\tif (!props.profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\r\n\r\n\t// todo: remove 'then' \r\n\tconst onSubmit: SubmitHandler<ProfileType> = profileData => {\r\n\t\tprops.saveProfile(profileData).then(() => {\r\n\t\t\tsetEditMode(false)\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.profileInfo}>\r\n\t\t\t<ProfileMainPicture />\r\n\t\t\t<div className={s.mainInfo}>\r\n\t\t\t\t<ProfileAvatar\r\n\t\t\t\t\tsavePhoto={props.savePhoto}\r\n\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\tisOwner={props.isOwner}\r\n\t\t\t\t/>\r\n\t\t\t\t{editMode ? (\r\n\t\t\t\t\t<ProfileDescriptionFormHooksReact\r\n\t\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<ProfileDescription\r\n\t\t\t\t\t\tprofile={props.profile}\r\n\t\t\t\t\t\tgoToEditMode={() => {\r\n\t\t\t\t\t\t\tsetEditMode(true)\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<ProfileStatusWithHooks\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__dplm+\",\"likes\":\"Post_likes__UChhH\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype Props = {\r\n\tid: number\r\n\tmessage: string\r\n\tlikesCount: number\r\n}\r\n\r\nconst Post:React.FC<Props> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.post}>\r\n\t\t\t<div>\r\n\t\t\t\t<div>post: {props.id} MESSAGE: {props.message}</div>\r\n\t\t\t\t<div className={s.likes}>Likes: {props.likesCount}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { useDispatch } from 'react-redux'\r\nimport { actions } from './../../../redux/profileReducer'\r\n\r\nexport type PostFormInput = {\r\n\tpostText: string\r\n}\r\n\r\nexport const CreatePostFormHookReact: React.FC = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst onAddPost = (postText: string) => {\r\n\t\tdispatch(actions.addPost(postText))\r\n\t}\r\n\tconst { register, handleSubmit } = useForm<PostFormInput>()\r\n\tconst onSubmit: SubmitHandler<PostFormInput> = values => {\r\n\t\tonAddPost(values.postText)\r\n\t}\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-textarea rounded-xl w-80 h-10'\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\t{...register('postText', {})}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName='m-3 px-10 py-2 \r\n\t\t\t\t\t\t\t\trounded bg-orange-300 \r\n\t\t\t\t\t\t\t\thover:bg-orange-400 active:bg-orange-500\r\n\t\t\t\t\t\t\t\ttransition-all '\r\n\t\t\t\ttype='submit'\r\n\t\t\t>\r\n\t\t\t\tSend Post\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport s from './CreatePost.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { CreatePostFormHookReact } from './CreatePostForm copy'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/reduxStore'\r\n\r\n\r\nconst CreatePost: React.FC =() => {\r\n\tconst postData = useSelector(\r\n\t\t(state: AppStateType) => state.profilePage.postData\r\n\t)\r\n\tconst postElements = postData\r\n\t\t.map(p => {\r\n\t\t\treturn (\r\n\t\t\t\t<Post\r\n\t\t\t\t\tkey={p.id}\r\n\t\t\t\t\tid={p.id}\r\n\t\t\t\t\tmessage={p.message}\r\n\t\t\t\t\tlikesCount={p.likesCount}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t\t.reverse()\r\n\t\r\n\treturn (\r\n\t\t<div className=''>\r\n\t\t\t<h3 className='text-3xl mt-5'>Create New Post!</h3>\r\n\t\t\t<CreatePostFormHookReact />\r\n\t\t\t{postElements}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CreatePost;","import { FC } from 'react'\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport CreatePost from \"./CreatePost/CreatePost\";\r\nimport { PostDataType, ProfileType } from '../../types/commonTypes';\r\n\r\n\r\ntype Props = {\r\n\tisOwner: boolean\r\n\tprofile: ProfileType|null\r\n\tstatus: string\r\n\tsavePhoto: (file: any) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst Profile:FC<Props> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.profile}>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tsavePhoto={props.savePhoto}\r\n\t\t\t\tisOwner={props.isOwner}\r\n\t\t\t\tprofile={props.profile}\r\n\t\t\t\tstatus={props.status}\r\n\t\t\t\tupdateStatus={props.updateStatus}\r\n\t\t\t\tsaveProfile={props.saveProfile}\r\n\t\t\t/>\r\n\t\t\t<CreatePost />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Profile;","import React from 'react'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport { Location, NavigateFunction, useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport {\r\n\tactions,\r\n\tgetProfileStatus,\r\n\tgetUserProfile,\r\n\tsavePhoto,\r\n\tsaveProfile,\r\n\tupdateProfileStatus,\r\n} from '../../redux/profileReducer'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport {  ProfileType } from '../../types/commonTypes'\r\nimport Profile from './Profile'\r\n\r\ntype MapStateProps =\r\n\t{\r\n\tprofile: ProfileType\r\n\tstatus: string\r\n\tauthorizedUserId: number\r\n}\r\ntype MapDispatchProps = {\r\n\tgetUserProfile: (userId: number) => void\r\n\tgetProfileStatus: (userId: number) => void\r\n\tupdateProfileStatus: (status: string) => void\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\ntype MyOwnProps = {\r\n\trouter: {\r\n\t\tnavigate: NavigateFunction\r\n\t\tparams: { userId: string }\r\n\t}\r\n}\r\ntype PropsType = MapStateProps & MapDispatchProps & MyOwnProps\r\n\r\n// const ProfilePage = () => {\r\n// \t//state data\r\n// \tconst profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n// \tconst status = useSelector((state: AppStateType) => state.profilePage.status)\r\n// \tconst authorizedUserId = useSelector((state: AppStateType) => state.auth.id)\r\n// //hooks\r\n// \tconst params = useParams()\r\n// \tconst navigate = useNavigate()\r\n// \tconst dispatch = useDispatch()\r\n// //actions\r\n\r\n\r\n// \treturn (\r\n// \t\t<Profile\r\n// \t\t\tprofile={profile}\r\n// \t\t\tpostData={postData}\r\n// \t\t\tstatus={status}\r\n// \t\t\t// isOwner={!this.props.router.params.userId}\r\n// \t\t\t// savePhoto={this.props.savePhoto}\r\n// \t\t\t// addPost={this.props.addPost}\r\n// \t\t\t// updateStatus={this.props.updateProfileStatus}\r\n// \t\t\t// saveProfile={this.props.saveProfile}\r\n// \t\t/>\r\n// \t)\r\n// }\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\t\r\n\tprofileRefresh() {\r\n\t\tlet userId = +this.props.router.params.userId\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId\r\n\t\t\tif (!userId) {this.props.router.navigate('/login')}\r\n\t\t}\r\n\t\tthis.props.getUserProfile(userId)\r\n\t\tthis.props.getProfileStatus(userId)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.profileRefresh()\r\n\t}\r\n\tcomponentDidUpdate(prevProps: PropsType) {\r\n\t\tif (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n\t\t\tthis.profileRefresh()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile\r\n\t\t\tprofile={this.props.profile}\r\n\t\t\tstatus={this.props.status}\r\n\t\t\tisOwner={!this.props.router.params.userId}\r\n\t\t\tsavePhoto={this.props.savePhoto}\r\n\t\t\tupdateStatus={this.props.updateProfileStatus}\r\n\t\t\tsaveProfile={this.props.saveProfile}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n\tpostData: state.profilePage.postData,\r\n\tpostText: state.profilePage.postText,\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tauthorizedUserId: state.auth.id,\r\n})\r\nfunction withRouter(Component: React.ComponentType) {\r\n\tfunction ComponentWithRouterProp(\tprops:any\t) {\r\n\t\tlet navigate = useNavigate()\r\n\t\tlet params = useParams()\r\n\t\treturn <Component {...props} router={{ navigate, params }} />\r\n\t}\r\n\treturn ComponentWithRouterProp\r\n}\r\nexport default compose(\r\n\tconnect(mapStateToProps, {\r\n\t\taddPost:actions.addPost,\r\n\t\tgetUserProfile,\r\n\t\tgetProfileStatus,\r\n\t\tupdateProfileStatus,\r\n\t\tsavePhoto,\r\n\t\tsaveProfile,\r\n\t}),\r\n\twithRouter,\r\n\twithAuthRedirect\r\n)(ProfileContainer) as React.ComponentType\r\n"],"names":["mapStateToPropsForNavigate","state","isAuth","auth","WrappedComponent","connect","props","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Navigate","to","_ref","profile","isOwner","savePhoto","_jsxs","className","s","children","src","photos","large","userPhoto","type","onChange","e","_e$target$files","target","files","length","title","value","goToEditMode","fullName","replace","toUpperCase","lookingForAJob","aboutMe","lookingForAJobDescription","Object","keys","contacts","map","key","currentValue","Contact","onClick","ProfileDescriptionFormHooksReact","onSubmit","_useForm","useForm","register","handleSubmit","placeholder","required","maxLength","concat","currentStatus","useSelector","profilePage","status","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","setStatus","useEffect","toggleEditMode","updateProfileStatus","onUpdateStatus","currentTarget","autoFocus","onBlur","onDoubleClick","Preloader","ProfileMainPicture","ProfileAvatar","profileData","saveProfile","then","ProfileDescription","ProfileStatusWithHooks","id","message","likesCount","CreatePostFormHookReact","values","postText","actions","postElements","postData","p","Post","reverse","ProfileInfo","updateStatus","CreatePost","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","authorizedUserId","navigate","getUserProfile","getProfileStatus","profileRefresh","prevProps","Profile","React","compose","addPost","Component","useNavigate","useParams","withAuthRedirect"],"sourceRoot":""}