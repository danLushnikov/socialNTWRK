{"version":3,"file":"static/js/417.c0b40d33.chunk.js","mappings":"oKACA,EAA2B,2BAA3B,EAAgE,0BAAhE,EAAmG,yBAAnG,EAAqI,yBAArI,EAA4K,8BAA5K,EAAoN,0BAApN,EAA2P,6B,mBCmB3P,EAX+B,SAACA,GAE/B,OACCC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAASC,UACxBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAI,aAAeN,EAAMO,GACjCL,UAAW,SAAAM,GAAO,OAAIA,EAAQC,SAAWN,OAAWO,CAAS,EAACN,SAAEJ,EAAMW,QAI1E,ECRA,EAJgC,SAACX,GAC7B,OAASC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEJ,EAAMY,SAC/C,E,oBCIaC,EAAyC,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SACxDC,GAAmCC,EAAAA,EAAAA,MAA3BC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAElB,OACCC,EAAAA,EAAAA,MAAA,QAAML,SAAUI,EAAaJ,GAAWb,UAAWC,EAAaC,SAAA,EAC/DH,EAAAA,EAAAA,KAAA,OAAAG,UACCH,EAAAA,EAAAA,KAAA,SAAAoB,EAAAA,EAAAA,GAAA,CACCnB,UAAU,qCACVoB,KAAK,YACDJ,EAAS,cAAe,CAAC,QAG/BjB,EAAAA,EAAAA,KAAA,UAAQC,UAAU,wGAGIoB,KAAK,SAAQlB,SAAC,mBAKvC,E,oBCiBA,EA1BiB,WAChB,IAAMmB,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAkB,OAAGA,EAAMC,aAAaH,UAAU,IAC5EI,GAAcH,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,aAAaC,WAAW,IACjFC,GAAWC,EAAAA,EAAAA,MAKbC,EAAiBP,EAAWQ,KAAI,SAAAC,GAAC,OACpC/B,EAAAA,EAAAA,KAACgC,EAAM,CAAYtB,KAAMqB,EAAErB,KAAMJ,GAAIyB,EAAEzB,IAA1ByB,EAAEzB,GAA8B,IAE1C2B,EAAkBP,EAAYI,KAAI,SAAAI,GAAC,OACtClC,EAAAA,EAAAA,KAACmC,EAAO,CAAYxB,QAASuB,EAAEvB,SAAjBuB,EAAE5B,GAA0B,IACxC8B,UAKH,OACCjB,EAAAA,EAAAA,MAAA,OAAKlB,UAAWC,EAAWC,SAAA,EAC1BH,EAAAA,EAAAA,KAACY,EAAqB,CAACE,SAL0B,SAAAuB,GAXhC,IAACC,IAYPD,EAAKC,YAXjBX,EAASY,EAAAA,EAAAA,WAAmBD,GAY7B,KAIEtC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAE0B,KAC5B7B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,SAAE8B,MAGnC,C","sources":["webpack://my-ts-app/./src/components/Messages/Messages.module.css?8e7e","components/Messages/Dialog/Dialog.tsx","components/Messages/Message/Message.tsx","components/Messages/MessagesReduxForm copy.tsx","components/Messages/MessagesPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__0BxAm\",\"dialogs\":\"Messages_dialogs__LJnPz\",\"dialog\":\"Messages_dialog__52Pqg\",\"active\":\"Messages_active__Ppo0H\",\"messageItem\":\"Messages_messageItem__sBYSF\",\"message\":\"Messages_message__GV1oY\",\"addMessage\":\"Messages_addMessage__7jqIM\"};","import React from 'react';\r\nimport s from \"../Messages.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n\tid: number\r\n\tname:string\r\n}\r\n\r\nconst Dialog:React.FC<Props> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={s.dialog}>\r\n\t\t\t<NavLink to={'/messages/' + props.id}\r\n\t\t\t\tclassName={navData => navData.isActive ? s.active : undefined}>{props.name}\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from \"../Messages.module.css\";\r\n\r\ntype Props = {\r\n    message:string\r\n}\r\nconst Message:React.FC<Props> = (props) => {\r\n    return   <div className={s.message}>{props.message}</div>\r\n};\r\n\r\nexport default Message;","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport s from './Messages.module.css'\r\n\r\ntype Props = {\r\n\tonSubmit: SubmitHandler<IMessageFormInput>\r\n}\r\n\r\nexport type IMessageFormInput = {\r\n\tmessageText: string\r\n}\r\n\r\nexport const MessagesFormHookReact: React.FC<Props> = ({ onSubmit }) => {\r\n\tconst { register, handleSubmit } = useForm<IMessageFormInput>()\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)} className={s.addMessage}>\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-textarea rounded-xl w-80 h-10'\r\n\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\t{...register('messageText', {})}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<button className='m-3 px-10 py-2 \r\n\t\t\t\t\t\t\t\trounded bg-orange-300 \r\n\t\t\t\t\t\t\t\thover:bg-orange-400 active:bg-orange-500\r\n\t\t\t\t\t\t\t\ttransition-all ' type='submit'>\r\n\t\t\t\tSend Message\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React, { FC } from 'react';\r\nimport s from './Messages.module.css'\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport { MessagesReduxForm } from './MessagesReduxForm';\r\nimport { DialogDataType, MessageDataType } from '../../types/commonTypes';\r\nimport { IMessageFormInput, MessagesFormHookReact } from './MessagesReduxForm copy'\r\nimport { SubmitHandler } from 'react-hook-form'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport { actions } from '../../redux/messagesReducer'\r\n\r\n\r\n\r\n// type Props = {\r\n// \tdialogData: Array<DialogDataType>\r\n// \tmessageData: Array<MessageDataType>\r\n// \taddMessage: (messageText: string) => void\r\n// }\r\n// export type MessageFormValuesType = {\r\n// \tmessageText:string\r\n// }\r\n\r\nconst Messages = () => {\r\n\tconst dialogData = useSelector((state:AppStateType)=>state.messagesPage.dialogData)\r\n\tconst messageData = useSelector((state: AppStateType) => state.messagesPage.messageData)\r\n\tconst dispatch = useDispatch()\r\n\tconst addMessage = (messageText:string) => {\r\n\t\tdispatch(actions.addMessage(messageText))\r\n\t}\r\n//todo:ask somebody should i move this logic to selector file\r\n\tlet dialogElements = dialogData.map(d => (\r\n\t\t<Dialog key={d.id} name={d.name} id={d.id} />\r\n\t))\r\n\tlet messageElements = messageData.map(m => (\r\n\t\t<Message key={m.id} message={m.message} />\r\n\t)).reverse()\r\n\r\n\tconst onSubmit: SubmitHandler<IMessageFormInput> = data => {\r\n\t\t\taddMessage(data.messageText)\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.messages}>\r\n\t\t\t<MessagesFormHookReact onSubmit={onSubmit} />\r\n\t\t\t<nav className={s.dialogs}>{dialogElements}</nav>\r\n\t\t\t<div className={s.messageItem}>{messageElements}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Messages;"],"names":["props","_jsx","className","s","children","NavLink","to","id","navData","isActive","undefined","name","message","MessagesFormHookReact","_ref","onSubmit","_useForm","useForm","register","handleSubmit","_jsxs","_objectSpread","type","dialogData","useSelector","state","messagesPage","messageData","dispatch","useDispatch","dialogElements","map","d","Dialog","messageElements","m","Message","reverse","data","messageText","actions"],"sourceRoot":""}